import autogenerated.ExpLexer;
import autogenerated.ExpParser;
import complex.Complex;
import exception.DivisionByZero;
import exception.NumberIsTooBig;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import visitor.MyExpBaseVisitor;

import static org.junit.jupiter.api.Assertions.*;

class MainTest {
    MyExpBaseVisitor visitor = new MyExpBaseVisitor();

    ParseTree prepareLexer(String str) {
        CharStream input = CharStreams.fromString(str);
        ExpLexer lexer = new ExpLexer(input);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        ExpParser parser = new ExpParser(tokens);
        MyExpBaseVisitor visitor = new MyExpBaseVisitor();
        return parser.stmt();
    }

    @Test
    void testPlus() {
        visitor.visit(prepareLexer("a = 1 + 4"));
        assertEquals(Complex.fromDouble(5.), visitor.getVarsState().get("a"));
    }

    @Test
    void testMinus() {
        visitor.visit(prepareLexer("a = -1 - 4"));
        assertEquals( Complex.fromDouble( -5.), visitor.getVarsState().get("a"));
    }

    @Test
    void testMultiply() {
        visitor.visit(prepareLexer("a = -1 * -4"));
        assertEquals(Complex.fromDouble(4.), visitor.getVarsState().get("a"));
    }

    @Test
    void testDivide() {
        visitor.visit(prepareLexer("a = 4 /2"));
        assertEquals( Complex.fromDouble(2.), visitor.getVarsState().get("a"));
    }

    @Test
    void testBrackets() {
        visitor.visit(prepareLexer("a = (1 + 4)*7"));
        assertEquals( Complex.fromDouble(35.), visitor.getVarsState().get("a"));
    }

    @Test
    void divByZero() {
        Assertions.assertThrows(DivisionByZero.class, () -> {
            visitor.visit(prepareLexer("a = 1/0"));
        });
    }

    @Test
    void divNumberIsTooBig() {
        Assertions.assertThrows(NumberIsTooBig.class, () -> {
            visitor.visit(prepareLexer("a = 100000000000 + 1"));
        });
    }

    @Test
    void testMultiline() {
        ParseTree parseTree1 = prepareLexer("a = 2");
        ParseTree parseTree2 = prepareLexer("b = 3");
        ParseTree parseTree3 = prepareLexer("c = 2 * 5");
        ParseTree parseTree4 = prepareLexer("d = c - a");

        visitor.visit(parseTree1);
        visitor.visit(parseTree2);
        visitor.visit(parseTree3);
        visitor.visit(parseTree4);
        System.out.println(visitor);
        assertEquals(Complex.fromDouble( 8.), visitor.getVarsState().get("d"));
    }

    @Test
    void testSimple() {
        visitor.visit(prepareLexer("a = Re 1 Im 4"));
        assertEquals(new Complex(1.,4.), visitor.getVarsState().get("a"));
    }

    @Test
    void testComplexPlus() {
        visitor.visit(prepareLexer("a = Re1Im4 + Re5Im6"));
        assertEquals(new Complex(6.,10.), visitor.getVarsState().get("a"));
    }

    @Test
    void testComplexMinus() {
        visitor.visit(prepareLexer("a = Re1Im4 - Re5Im6"));
        assertEquals( new Complex( -4.,-2.), visitor.getVarsState().get("a"));
    }

    @Test
    void testComplexMultiply() {
        visitor.visit(prepareLexer("a = Re1Im4 * Re5Im6"));
        assertEquals(new Complex(-19., 26.), visitor.getVarsState().get("a"));
    }

    @Test
    void testComplexDivide1() {
        visitor.visit(prepareLexer("a = Re-1Im4 / Re2Im0"));
        assertEquals( new Complex(-0.5,2.), visitor.getVarsState().get("a"));
    }

    @Test
    void testComplexDivide2() {
        visitor.visit(prepareLexer("a = Re1Im-4 / Re0Im2"));
        assertEquals( new Complex(-2.,-0.5), visitor.getVarsState().get("a"));
    }
}