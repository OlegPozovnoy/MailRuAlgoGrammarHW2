
import java.io.*;
import java.util.*;

import autogenerated.ExpLexer;
import autogenerated.ExpParser;
import complex.Complex;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.ParseTree;
import visitor.MyExpBaseVisitor;

public class Main {
    public static void main(String[] args) throws FileNotFoundException {
        //InputStream inputStream = new FileInputStream(new File("./src/test.txt"));
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        DoIt solver = new DoIt();
        solver.solve(in, out);
        out.close();
    }

    static class DoIt {
        public void solve(InputReader in, PrintWriter out) {
            CharStream  input = CharStreams.fromString("a = +12*5-6)");
            ExpLexer lexer = new ExpLexer(input);
            CommonTokenStream tokens = new CommonTokenStream(lexer);
            ExpParser parser = new ExpParser(tokens);

            MyExpBaseVisitor visitor = new MyExpBaseVisitor();
            ParseTree tree = parser.stmt();
            Complex result = visitor.visit(tree);
            System.out.println(visitor);
        }
    }


    public static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) throws FileNotFoundException {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    String str = reader.readLine();
                    if (str == null)
                        return "";
                    else
                        tokenizer = new StringTokenizer(str);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

    }
}
