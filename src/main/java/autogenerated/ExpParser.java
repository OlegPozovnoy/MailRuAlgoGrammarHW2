package autogenerated;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class ExpParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.8", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		Eq=1, Plus=2, Minus=3, Mult=4, Div=5, OBracket=6, CBracker=7, Number=8, 
		Variable=9, RE=10, IM=11, WS=12;
	public static final int
		RULE_stmt = 0, RULE_expr = 1, RULE_lterm = 2, RULE_rsum = 3, RULE_multdiv = 4, 
		RULE_terminate = 5, RULE_signed_number = 6, RULE_complex = 7;
	private static String[] makeRuleNames() {
		return new String[] {
			"stmt", "expr", "lterm", "rsum", "multdiv", "terminate", "signed_number", 
			"complex"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'='", "'+'", "'-'", "'*'", "'/'", "'('", "')'", null, null, "'Re'", 
			"'Im'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "Eq", "Plus", "Minus", "Mult", "Div", "OBracket", "CBracker", "Number", 
			"Variable", "RE", "IM", "WS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "Exp.g"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public ExpParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class StmtContext extends ParserRuleContext {
		public Token v;
		public ExprContext e;
		public TerminalNode Eq() { return getToken(ExpParser.Eq, 0); }
		public TerminalNode Variable() { return getToken(ExpParser.Variable, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ExpListener ) ((ExpListener)listener).enterStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ExpListener ) ((ExpListener)listener).exitStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ExpVisitor ) return ((ExpVisitor<? extends T>)visitor).visitStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtContext stmt() throws RecognitionException {
		StmtContext _localctx = new StmtContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(16);
			((StmtContext)_localctx).v = match(Variable);
			setState(17);
			match(Eq);
			setState(18);
			((StmtContext)_localctx).e = expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprContext extends ParserRuleContext {
		public LtermContext l1;
		public RsumContext r1;
		public LtermContext l2;
		public LtermContext lterm() {
			return getRuleContext(LtermContext.class,0);
		}
		public RsumContext rsum() {
			return getRuleContext(RsumContext.class,0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ExpListener ) ((ExpListener)listener).enterExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ExpListener ) ((ExpListener)listener).exitExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ExpVisitor ) return ((ExpVisitor<? extends T>)visitor).visitExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		ExprContext _localctx = new ExprContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(24);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				setState(20);
				((ExprContext)_localctx).l1 = lterm();
				setState(21);
				((ExprContext)_localctx).r1 = rsum();
				}
				break;
			case 2:
				{
				setState(23);
				((ExprContext)_localctx).l2 = lterm();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LtermContext extends ParserRuleContext {
		public TerminateContext t1;
		public MultdivContext p1;
		public TerminateContext t2;
		public TerminateContext terminate() {
			return getRuleContext(TerminateContext.class,0);
		}
		public MultdivContext multdiv() {
			return getRuleContext(MultdivContext.class,0);
		}
		public LtermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lterm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ExpListener ) ((ExpListener)listener).enterLterm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ExpListener ) ((ExpListener)listener).exitLterm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ExpVisitor ) return ((ExpVisitor<? extends T>)visitor).visitLterm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LtermContext lterm() throws RecognitionException {
		LtermContext _localctx = new LtermContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_lterm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(30);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				setState(26);
				((LtermContext)_localctx).t1 = terminate();
				setState(27);
				((LtermContext)_localctx).p1 = multdiv();
				}
				break;
			case 2:
				{
				setState(29);
				((LtermContext)_localctx).t2 = terminate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RsumContext extends ParserRuleContext {
		public ExprContext e1;
		public ExprContext e2;
		public TerminalNode Plus() { return getToken(ExpParser.Plus, 0); }
		public TerminalNode Minus() { return getToken(ExpParser.Minus, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public RsumContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rsum; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ExpListener ) ((ExpListener)listener).enterRsum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ExpListener ) ((ExpListener)listener).exitRsum(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ExpVisitor ) return ((ExpVisitor<? extends T>)visitor).visitRsum(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RsumContext rsum() throws RecognitionException {
		RsumContext _localctx = new RsumContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_rsum);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(36);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Plus:
				{
				setState(32);
				match(Plus);
				setState(33);
				((RsumContext)_localctx).e1 = expr();
				}
				break;
			case Minus:
				{
				setState(34);
				match(Minus);
				setState(35);
				((RsumContext)_localctx).e2 = expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultdivContext extends ParserRuleContext {
		public LtermContext l;
		public LtermContext d;
		public TerminalNode Mult() { return getToken(ExpParser.Mult, 0); }
		public TerminalNode Div() { return getToken(ExpParser.Div, 0); }
		public LtermContext lterm() {
			return getRuleContext(LtermContext.class,0);
		}
		public MultdivContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multdiv; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ExpListener ) ((ExpListener)listener).enterMultdiv(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ExpListener ) ((ExpListener)listener).exitMultdiv(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ExpVisitor ) return ((ExpVisitor<? extends T>)visitor).visitMultdiv(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultdivContext multdiv() throws RecognitionException {
		MultdivContext _localctx = new MultdivContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_multdiv);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(42);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Mult:
				{
				setState(38);
				match(Mult);
				setState(39);
				((MultdivContext)_localctx).l = lterm();
				}
				break;
			case Div:
				{
				setState(40);
				match(Div);
				setState(41);
				((MultdivContext)_localctx).d = lterm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TerminateContext extends ParserRuleContext {
		public TerminateContext t1;
		public TerminateContext t2;
		public Token v;
		public Token n;
		public ComplexContext c;
		public ExprContext e;
		public TerminalNode Plus() { return getToken(ExpParser.Plus, 0); }
		public TerminalNode Minus() { return getToken(ExpParser.Minus, 0); }
		public TerminalNode OBracket() { return getToken(ExpParser.OBracket, 0); }
		public TerminalNode CBracker() { return getToken(ExpParser.CBracker, 0); }
		public TerminateContext terminate() {
			return getRuleContext(TerminateContext.class,0);
		}
		public TerminalNode Variable() { return getToken(ExpParser.Variable, 0); }
		public TerminalNode Number() { return getToken(ExpParser.Number, 0); }
		public ComplexContext complex() {
			return getRuleContext(ComplexContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_terminate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ExpListener ) ((ExpListener)listener).enterTerminate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ExpListener ) ((ExpListener)listener).exitTerminate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ExpVisitor ) return ((ExpVisitor<? extends T>)visitor).visitTerminate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TerminateContext terminate() throws RecognitionException {
		TerminateContext _localctx = new TerminateContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_terminate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(55);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Plus:
				{
				setState(44);
				match(Plus);
				setState(45);
				((TerminateContext)_localctx).t1 = terminate();
				}
				break;
			case Minus:
				{
				setState(46);
				match(Minus);
				setState(47);
				((TerminateContext)_localctx).t2 = terminate();
				}
				break;
			case Variable:
				{
				setState(48);
				((TerminateContext)_localctx).v = match(Variable);
				}
				break;
			case Number:
				{
				setState(49);
				((TerminateContext)_localctx).n = match(Number);
				}
				break;
			case RE:
				{
				setState(50);
				((TerminateContext)_localctx).c = complex();
				}
				break;
			case OBracket:
				{
				setState(51);
				match(OBracket);
				setState(52);
				((TerminateContext)_localctx).e = expr();
				setState(53);
				match(CBracker);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Signed_numberContext extends ParserRuleContext {
		public Token n1;
		public Token n2;
		public Token n3;
		public TerminalNode Plus() { return getToken(ExpParser.Plus, 0); }
		public TerminalNode Minus() { return getToken(ExpParser.Minus, 0); }
		public TerminalNode Number() { return getToken(ExpParser.Number, 0); }
		public Signed_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signed_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ExpListener ) ((ExpListener)listener).enterSigned_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ExpListener ) ((ExpListener)listener).exitSigned_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ExpVisitor ) return ((ExpVisitor<? extends T>)visitor).visitSigned_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Signed_numberContext signed_number() throws RecognitionException {
		Signed_numberContext _localctx = new Signed_numberContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_signed_number);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(62);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Plus:
				{
				setState(57);
				match(Plus);
				setState(58);
				((Signed_numberContext)_localctx).n1 = match(Number);
				}
				break;
			case Minus:
				{
				setState(59);
				match(Minus);
				setState(60);
				((Signed_numberContext)_localctx).n2 = match(Number);
				}
				break;
			case Number:
				{
				setState(61);
				((Signed_numberContext)_localctx).n3 = match(Number);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComplexContext extends ParserRuleContext {
		public Signed_numberContext re;
		public Signed_numberContext im;
		public TerminalNode RE() { return getToken(ExpParser.RE, 0); }
		public TerminalNode IM() { return getToken(ExpParser.IM, 0); }
		public List<Signed_numberContext> signed_number() {
			return getRuleContexts(Signed_numberContext.class);
		}
		public Signed_numberContext signed_number(int i) {
			return getRuleContext(Signed_numberContext.class,i);
		}
		public ComplexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_complex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ExpListener ) ((ExpListener)listener).enterComplex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ExpListener ) ((ExpListener)listener).exitComplex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ExpVisitor ) return ((ExpVisitor<? extends T>)visitor).visitComplex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComplexContext complex() throws RecognitionException {
		ComplexContext _localctx = new ComplexContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_complex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(64);
			match(RE);
			setState(65);
			((ComplexContext)_localctx).re = signed_number();
			setState(66);
			match(IM);
			setState(67);
			((ComplexContext)_localctx).im = signed_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\16H\4\2\t\2\4\3\t"+
		"\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\3\2\3\2\3\2\3\2\3\3"+
		"\3\3\3\3\3\3\5\3\33\n\3\3\4\3\4\3\4\3\4\5\4!\n\4\3\5\3\5\3\5\3\5\5\5\'"+
		"\n\5\3\6\3\6\3\6\3\6\5\6-\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\5\7:\n\7\3\b\3\b\3\b\3\b\3\b\5\bA\n\b\3\t\3\t\3\t\3\t\3\t\3\t\2\2"+
		"\n\2\4\6\b\n\f\16\20\2\2\2J\2\22\3\2\2\2\4\32\3\2\2\2\6 \3\2\2\2\b&\3"+
		"\2\2\2\n,\3\2\2\2\f9\3\2\2\2\16@\3\2\2\2\20B\3\2\2\2\22\23\7\13\2\2\23"+
		"\24\7\3\2\2\24\25\5\4\3\2\25\3\3\2\2\2\26\27\5\6\4\2\27\30\5\b\5\2\30"+
		"\33\3\2\2\2\31\33\5\6\4\2\32\26\3\2\2\2\32\31\3\2\2\2\33\5\3\2\2\2\34"+
		"\35\5\f\7\2\35\36\5\n\6\2\36!\3\2\2\2\37!\5\f\7\2 \34\3\2\2\2 \37\3\2"+
		"\2\2!\7\3\2\2\2\"#\7\4\2\2#\'\5\4\3\2$%\7\5\2\2%\'\5\4\3\2&\"\3\2\2\2"+
		"&$\3\2\2\2\'\t\3\2\2\2()\7\6\2\2)-\5\6\4\2*+\7\7\2\2+-\5\6\4\2,(\3\2\2"+
		"\2,*\3\2\2\2-\13\3\2\2\2./\7\4\2\2/:\5\f\7\2\60\61\7\5\2\2\61:\5\f\7\2"+
		"\62:\7\13\2\2\63:\7\n\2\2\64:\5\20\t\2\65\66\7\b\2\2\66\67\5\4\3\2\67"+
		"8\7\t\2\28:\3\2\2\29.\3\2\2\29\60\3\2\2\29\62\3\2\2\29\63\3\2\2\29\64"+
		"\3\2\2\29\65\3\2\2\2:\r\3\2\2\2;<\7\4\2\2<A\7\n\2\2=>\7\5\2\2>A\7\n\2"+
		"\2?A\7\n\2\2@;\3\2\2\2@=\3\2\2\2@?\3\2\2\2A\17\3\2\2\2BC\7\f\2\2CD\5\16"+
		"\b\2DE\7\r\2\2EF\5\16\b\2F\21\3\2\2\2\b\32 &,9@";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}